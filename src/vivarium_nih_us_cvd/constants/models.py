from vivarium_nih_us_cvd.constants import data_keys


class TransitionString(str):
    def __new__(cls, value):
        # noinspection PyArgumentList
        obj = str.__new__(cls, value.lower())
        obj.from_state, obj.to_state = value.split("_TO_")
        return obj


###########################
# Disease Model variables #
###########################

ISCHEMIC_STROKE_MODEL_NAME = data_keys.ISCHEMIC_STROKE.name
ISCHEMIC_STROKE_SUSCEPTIBLE_STATE_NAME = f"susceptible_to_{ISCHEMIC_STROKE_MODEL_NAME}"
ACUTE_ISCHEMIC_STROKE_STATE_NAME = f"acute_{ISCHEMIC_STROKE_MODEL_NAME}"
CHRONIC_ISCHEMIC_STROKE_STATE_NAME = f"chronic_{ISCHEMIC_STROKE_MODEL_NAME}"
ISCHEMIC_STROKE_MODEL_STATES = (
    ISCHEMIC_STROKE_SUSCEPTIBLE_STATE_NAME,
    ACUTE_ISCHEMIC_STROKE_STATE_NAME,
    CHRONIC_ISCHEMIC_STROKE_STATE_NAME,
)
ISCHEMIC_STROKE_MODEL_TRANSITIONS = (
    TransitionString(
        f"{ISCHEMIC_STROKE_SUSCEPTIBLE_STATE_NAME}_TO_{ACUTE_ISCHEMIC_STROKE_STATE_NAME}"
    ),
    TransitionString(
        f"{ACUTE_ISCHEMIC_STROKE_STATE_NAME}_TO_{CHRONIC_ISCHEMIC_STROKE_STATE_NAME}"
    ),
    TransitionString(
        f"{CHRONIC_ISCHEMIC_STROKE_STATE_NAME}_TO_{ACUTE_ISCHEMIC_STROKE_STATE_NAME}"
    ),
)


ISCHEMIC_HEART_DISEASE_AND_HEART_FAILURE_MODEL_NAME = data_keys.IHD_AND_HF.name
ISCHEMIC_HEART_DISEASE_AND_HEART_FAILURE_SUSCEPTIBLE_STATE_NAME = (
    f"susceptible_to_{ISCHEMIC_HEART_DISEASE_AND_HEART_FAILURE_MODEL_NAME}"
)
ACUTE_MYOCARDIAL_INFARCTION_STATE_NAME = "acute_myocardial_infarction"
POST_MYOCARDIAL_INFARCTION_STATE_NAME = "post_myocardial_infarction"
HEART_FAILURE_FROM_ISCHEMIC_HEART_DISEASE_STATE_NAME = (
    "heart_failure_from_ischemic_heart_disease"
)
ACUTE_MYOCARDIAL_INFARCTION_AND_HEART_FAILURE_STATE_NAME = (
    "acute_myocardial_infarction_and_heart_failure"
)
HEART_FAILURE_RESIDUAL_STATE_NAME = "heart_failure_residual"
ISCHEMIC_HEART_DISEASE_AND_HEART_FAILURE_MODEL_STATES = (
    ISCHEMIC_HEART_DISEASE_AND_HEART_FAILURE_SUSCEPTIBLE_STATE_NAME,
    ACUTE_MYOCARDIAL_INFARCTION_STATE_NAME,
    POST_MYOCARDIAL_INFARCTION_STATE_NAME,
    HEART_FAILURE_FROM_ISCHEMIC_HEART_DISEASE_STATE_NAME,
    ACUTE_MYOCARDIAL_INFARCTION_AND_HEART_FAILURE_STATE_NAME,
    HEART_FAILURE_RESIDUAL_STATE_NAME,
)
ISCHEMIC_HEART_DISEASE_AND_HEART_FAILURE_MODEL_TRANSITIONS = (
    TransitionString(
        f"{ISCHEMIC_HEART_DISEASE_AND_HEART_FAILURE_SUSCEPTIBLE_STATE_NAME}_TO_{ACUTE_MYOCARDIAL_INFARCTION_STATE_NAME}"
    ),
    TransitionString(
        f"{ISCHEMIC_HEART_DISEASE_AND_HEART_FAILURE_SUSCEPTIBLE_STATE_NAME}_TO_{HEART_FAILURE_FROM_ISCHEMIC_HEART_DISEASE_STATE_NAME}"
    ),
    TransitionString(
        f"{ISCHEMIC_HEART_DISEASE_AND_HEART_FAILURE_SUSCEPTIBLE_STATE_NAME}_TO_{HEART_FAILURE_RESIDUAL_STATE_NAME}"
    ),
    TransitionString(
        f"{ACUTE_MYOCARDIAL_INFARCTION_STATE_NAME}_TO_{POST_MYOCARDIAL_INFARCTION_STATE_NAME}"
    ),
    TransitionString(
        f"{ACUTE_MYOCARDIAL_INFARCTION_AND_HEART_FAILURE_STATE_NAME}_TO_{HEART_FAILURE_FROM_ISCHEMIC_HEART_DISEASE_STATE_NAME}"
    ),
    TransitionString(
        f"{POST_MYOCARDIAL_INFARCTION_STATE_NAME}_TO_{ACUTE_MYOCARDIAL_INFARCTION_STATE_NAME}"
    ),
    TransitionString(
        f"{POST_MYOCARDIAL_INFARCTION_STATE_NAME}_TO_{HEART_FAILURE_FROM_ISCHEMIC_HEART_DISEASE_STATE_NAME}"
    ),
    TransitionString(
        f"{HEART_FAILURE_FROM_ISCHEMIC_HEART_DISEASE_STATE_NAME}_TO_{ACUTE_MYOCARDIAL_INFARCTION_AND_HEART_FAILURE_STATE_NAME}"
    ),
)


STATE_MACHINE_MAP = {
    ISCHEMIC_STROKE_MODEL_NAME: {
        "states": ISCHEMIC_STROKE_MODEL_STATES,
        "transitions": ISCHEMIC_STROKE_MODEL_TRANSITIONS,
    },
    # ISCHEMIC_HEART_DISEASE_AND_HEART_FAILURE_MODEL_NAME: {
    #     "states": ISCHEMIC_HEART_DISEASE_AND_HEART_FAILURE_MODEL_STATES,
    #     "transitions": ISCHEMIC_HEART_DISEASE_AND_HEART_FAILURE_MODEL_TRANSITIONS,
    # },
}


STATES = tuple(
    f"{model}_{state}"
    for model, state in STATE_MACHINE_MAP.items()
    for state in STATE_MACHINE_MAP[model]["states"]
)
TRANSITIONS = tuple(
    f"{model}_{state}"
    for model, state in STATE_MACHINE_MAP.items()
    for state in STATE_MACHINE_MAP[model]["transitions"]
)
